(function(a,n){typeof exports=="object"&&typeof module<"u"?n(exports):typeof define=="function"&&define.amd?define(["exports"],n):(a=typeof globalThis<"u"?globalThis:a||self,n(a.morphia={}))})(this,function(a){"use strict";var b=Object.defineProperty;var k=(a,n,u)=>n in a?b(a,n,{enumerable:!0,configurable:!0,writable:!0,value:u}):a[n]=u;var p=(a,n,u)=>k(a,typeof n!="symbol"?n+"":n,u);class n{constructor(){p(this,"globalKeys",new Map);p(this,"separator","|");p(this,"arrayMarker","@");p(this,"objectMarker","&");p(this,"typeMarker","#");p(this,"keyCounter",0)}getOrCreateKey(t,y){const h=`${t}${this.typeMarker}${y}`;return this.globalKeys.has(h)||this.globalKeys.set(h,this.keyCounter++),this.globalKeys.get(h)}encodeKey(t){return encodeURIComponent(t)}decodeKey(t){return decodeURIComponent(t)}toArray(t){const y=[],h=[[t,"",new Set]];for(;h.length>0;){const[r,o,d]=h.pop();if(d.has(r))throw new Error("Circular reference detected");if(Array.isArray(r)){const l=this.getOrCreateKey(o,"array");y[l]=this.arrayMarker+r.length;for(let i=0;i<r.length;i++){const e=r[i],c=`${o}${o?this.separator:""}${this.encodeKey(i.toString())}`;if(this.isPrimitive(e)){const s=typeof e,f=this.getOrCreateKey(c,s);y[f]=e}else if(typeof e=="object"&&e!==null){const s=new Set(d);s.add(r),h.push([e,c,s])}}}else if(typeof r=="object"&&r!==null){const l=this.getOrCreateKey(o,"object");y[l]=this.objectMarker+Object.keys(r).length;for(const[i,e]of Object.entries(r)){const c=this.encodeKey(i),s=o?`${o}${this.separator}${c}`:c;if(this.isPrimitive(e)){const f=typeof e,g=this.getOrCreateKey(s,f);y[g]=e}else if(typeof e=="object"&&e!==null){const f=new Set(d);f.add(r),h.push([e,s,f])}}}else if(this.isPrimitive(r)){const l=typeof r,i=this.getOrCreateKey(o,l);y[i]=r}}return y}fromArray(t){if(t.length==0)throw new Error("Empty array input");if(this.globalKeys.size==0)throw new Error("No keys found");const y={};for(const[h,r]of this.globalKeys.entries()){if(r>=t.length)continue;const o=t[r],[d,l]=h.split(this.typeMarker);if(d.length==0&&l=="object"&&r==0)continue;const i=d.split(this.separator).map(this.decodeKey.bind(this));let e=y;for(let c=0;c<i.length;c++){const s=i[c],f=c===i.length-1;if(e)if(f)if(l==="array"&&typeof o=="string"&&o.startsWith(this.arrayMarker)){const g=parseInt(o.slice(1),10);e[s]=new Array(g)}else l==="object"&&typeof o=="string"&&o.startsWith(this.objectMarker)?e[s]={}:e[s]=o;else e[s]===void 0&&(isNaN(Number(i[c+1]))?e[s]={}:e[s]=[]),e=e[s]}}return y}get keys(){return Object.fromEntries(this.globalKeys)}set keys(t){this.globalKeys=new Map(Object.entries(t)),this.keyCounter=Math.max(...Object.values(t))+1}isPrimitive(t){return typeof t=="string"||typeof t=="number"||typeof t=="boolean"||t===null||t===void 0}}a.Morphia=n,Object.defineProperty(a,Symbol.toStringTag,{value:"Module"})});
