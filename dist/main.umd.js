(function(l,i){typeof exports=="object"&&typeof module<"u"?i(exports):typeof define=="function"&&define.amd?define(["exports"],i):(l=typeof globalThis<"u"?globalThis:l||self,i(l.morphia={}))})(this,function(l){"use strict";var p=Object.defineProperty;var K=(l,i,u)=>i in l?p(l,i,{enumerable:!0,configurable:!0,writable:!0,value:u}):l[i]=u;var d=(l,i,u)=>K(l,typeof i!="symbol"?i+"":i,u);var i=(t=>(t[t.Array=0]="Array",t[t.Object=1]="Object",t[t.Number=2]="Number",t[t.String=3]="String",t[t.Bigint=4]="Bigint",t[t.Boolean=5]="Boolean",t[t.Symbol=6]="Symbol",t[t.Undefined=7]="Undefined",t[t.Function=8]="Function",t))(i||{});class u{constructor(){d(this,"globalKeys",new Map);d(this,"separator","|");d(this,"arrayMarker","@");d(this,"objectMarker","&");d(this,"typeMarker","#");d(this,"keyCounter",0)}getOrCreateKey(r,h){let s;switch(h){case"string":s=3;break;case"number":s=2;break;case"bigint":s=4;break;case"boolean":s=5;break;case"symbol":s=6;break;case"undefined":s=7;break;case"object":s=1;break;case"function":s=8;break;case"array":s=0;break;default:throw new Error("Invalid type")}const e=`${r}${this.typeMarker}${s}`;return this.globalKeys.has(e)||this.globalKeys.set(e,this.keyCounter++),this.globalKeys.get(e)}encodeKey(r){return encodeURIComponent(r)}decodeKey(r){return decodeURIComponent(r)}toArray(r){const h=[],s=[[r,"",new Set]];for(;s.length>0;){const[e,a,g]=s.pop();if(g.has(e))throw new Error("Circular reference detected");if(Array.isArray(e)){const b=this.getOrCreateKey(a,"array");h[b]=this.arrayMarker+e.length;for(let f=0;f<e.length;f++){const n=e[f],o=`${a}${a?this.separator:""}${this.encodeKey(f.toString())}`;if(this.isPrimitive(n)){const y=typeof n,c=this.getOrCreateKey(o,y);h[c]=n}else if(typeof n=="object"&&n!==null){const y=new Set(g);y.add(e),s.push([n,o,y])}}}else if(typeof e=="object"&&e!==null){const b=this.getOrCreateKey(a,"object");h[b]=this.objectMarker+Object.keys(e).length;for(const[f,n]of Object.entries(e)){const o=this.encodeKey(f),y=a?`${a}${this.separator}${o}`:o;if(this.isPrimitive(n)){const c=typeof n,k=this.getOrCreateKey(y,c);h[k]=n}else if(typeof n=="object"&&n!==null){const c=new Set(g);c.add(e),s.push([n,y,c])}}}else if(this.isPrimitive(e)){const b=typeof e,f=this.getOrCreateKey(a,b);h[f]=e}}return h}fromArray(r){if(r.length==0)throw new Error("Empty array input");if(this.globalKeys.size==0)throw new Error("No keys found");const h={};for(const[s,e]of this.globalKeys.entries()){if(e>=r.length)continue;const a=r[e],[g,b]=s.split(this.typeMarker),f=parseFloat(b);if(g.length==0&&f==1&&e==0)continue;const n=g.split(this.separator).map(this.decodeKey.bind(this));let o=h;for(let y=0;y<n.length;y++){const c=n[y],k=y===n.length-1;if(o)if(k)if(f===0&&typeof a=="string"&&a.startsWith(this.arrayMarker)){const m=parseInt(a.slice(1),10);o[c]=new Array(m)}else f===1&&typeof a=="string"&&a.startsWith(this.objectMarker)?o[c]={}:o[c]=a;else o[c]===void 0&&(isNaN(Number(n[y+1]))?o[c]={}:o[c]=[]),o=o[c]}}return h}get keys(){return Object.fromEntries(this.globalKeys)}set keys(r){this.globalKeys=new Map(Object.entries(r)),this.keyCounter=Math.max(...Object.values(r))+1}isPrimitive(r){return typeof r=="string"||typeof r=="number"||typeof r=="boolean"||r===null||r===void 0}}l.Morphia=u,l.MorphiaType=i,Object.defineProperty(l,Symbol.toStringTag,{value:"Module"})});
